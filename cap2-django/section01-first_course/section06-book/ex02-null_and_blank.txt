    It's crucial to understand that the options in a Django model field definition serve (at 
least) two purposes: defining the database tables, and defining the default format and 
validation of model forms. (I say "default" because the values can always be overridden by 
providing a custom form.) Some options affect the database, some options affect forms, and some 
affect both.

When it comes to null and blank, other answers have already made clear that the former affects 
the database table definition and the latter affects model validation. I think the distinction 
can be made even clearer by looking at use cases for all four possible configurations:

null=False, blank=False: 
    This is the default configuration and means that the value is required 
    in all circumstances.

null=True, blank=True: 
    This means that the field is optional in all circumstances. (As noted below, though, this is 
    not the recommended way to make string-based fields optional.)

null=False, blank=True: 
    This means that the form doesn't require a value but the database does. There are a number 
    of use cases for this:
        => The most common use is for optional string-based fields. As noted in the 
        documentation, the Django idiom is to use the empty string to indicate a missing value. 
        If NULL was also allowed you would end up with two different ways to indicate a missing 
        value.

        => Another common situation is that you want to calculate one field automatically based 
        on the value of another (in your save() method, say). You don't want the user to provide 
        the value in a form (hence blank=True), but you do want the database to enforce that a 
        value is always provided (null=False).

        => Another use is when you want to indicate that a ManyToManyField is optional. Because 
        this field is implemented as a separate table rather than a database column, null is 
        meaningless. The value of blank will still affect forms, though, controlling whether or 
        not validation will succeed when there are no relations.

null=True, blank=False: 
    This means that the form requires a value but the database doesn't. This may be the most 
    infrequently used configuration, but there are some use cases for it:

        => It's perfectly reasonable to require your users to always include a value even if 
        it's not actually required by your business logic. After all, forms are only one way of 
        adding and editing data. You may have code that is generating data which doesn't need 
        the same stringent validation that you want to require of a human editor.

        => Another use case that I've seen is when you have a ForeignKey for which you don't wish
        to allow cascade deletion. That is, in normal use the relation should always be there 
        (blank=False), but if the thing it points to happens to be deleted, you don't want this 
        object to be deleted too. In that case you can use null=True and 
        on_delete=models.SET_NULL to implement a simple kind of soft deletion.
        